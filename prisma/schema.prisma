// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(cuid())
  email     String      @unique
  name      String?
  createdAt DateTime    @default(now())
  Roles     UserRole[]
  clerkId   String      @unique
  Workspace Workspace[]
}

model Workspace {
  id        String     @id @default(cuid())
  name      String
  ownerId   String
  Owner     User       @relation(fields: [ownerId], references: [id])
  Locations Location[]
  Roles     UserRole[]
  createdAt DateTime   @default(now())
  Events    Event[]
}

model UserRole {
  id            String  @id @default(cuid())
  userId        String
  workspaceId   String
  Role          Role
  email         String
  name          String?
  CreatedEvents Event[]

  User      User      @relation(fields: [userId], references: [id])
  Workspace Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([userId, workspaceId])
}

enum Role {
  ADMIN
  EMPLOYEE
}

model Location {
  id            String         @id @default(cuid())
  name          String
  address       String?
  description   String?
  workspaceId   String
  Workspace     Workspace      @relation(fields: [workspaceId], references: [id])
  Events        Event[]
  defaultLayout SeatingLayout? @relation("LocationDefaultLayout")
}

model Event {
  id           String         @id @default(cuid())
  name         String
  description  String?
  startsAt     DateTime?
  endsAt       DateTime?
  locationId   String?
  Location     Location?      @relation(fields: [locationId], references: [id])
  userRoleId   String
  CreatedBy    UserRole       @relation(fields: [userRoleId], references: [id])
  workspaceId  String
  Workspace    Workspace      @relation(fields: [workspaceId], references: [id])
  Tickets      Ticket[]
  TicketTypes  TicketType[]
  customLayout SeatingLayout? @relation("EventCustomLayout")
}

model Ticket {
  id           String       @id @default(cuid())
  name         String
  email        String
  price        Int // Price in cents
  status       TicketStatus @default(PENDING)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  eventId      String
  Event        Event        @relation(fields: [eventId], references: [id])
  ticketTypeId String
  TicketType   TicketType   @relation(fields: [ticketTypeId], references: [id])
  seatId       String?      @unique
  seat         Seat?

  @@index([email])
  @@index([status])
}

model TicketType {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Int // Price in cents
  quantity    Int? // Optional quantity limit
  eventId     String
  Event       Event    @relation(fields: [eventId], references: [id])
  Tickets     Ticket[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum TicketStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REFUNDED
}

model SeatingLayout {
  id          String    @id @default(cuid())
  name        String
  description String?
  // Location relation (for default layouts)
  locationId  String?   @unique
  Location    Location? @relation("LocationDefaultLayout", fields: [locationId], references: [id])
  // Event relation (for custom layouts)
  eventId     String?   @unique
  Event       Event?    @relation("EventCustomLayout", fields: [eventId], references: [id])
  sections    Section[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Section {
  id              String        @id @default(cuid())
  name            String
  description     String?
  seatingLayoutId String
  SeatingLayout   SeatingLayout @relation(fields: [seatingLayoutId], references: [id])
  rows            Row[]
  priceMultiplier Float         @default(1.0) // For section-specific pricing
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Row {
  id        String   @id @default(cuid())
  name      String // e.g., "A", "B", "1", "2"
  sectionId String
  Section   Section  @relation(fields: [sectionId], references: [id])
  seats     Seat[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([sectionId, name])
}

model Seat {
  id        String     @id @default(cuid())
  number    String // e.g., "1", "2", "3"
  status    SeatStatus @default(AVAILABLE)
  rowId     String
  Row       Row        @relation(fields: [rowId], references: [id])
  ticketId  String?    @unique
  ticket    Ticket?    @relation(fields: [ticketId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([rowId, number])
}

enum SeatStatus {
  AVAILABLE
  RESERVED
  OCCUPIED
  DISABLED
}
